#! /usr/bin/python
import yaml
import sys
import re
from os.path import join as joinpath

def main():
	data = StardewData("Unpacked")

	print """<!DOCTYPE html>
<html><head><meta charset="utf-8">
<style>
td.n { text-align: right; }
td,th { border:1px solid #555; }
table { border-collapse: collapse; }
</style>
</head>
<body>
<table>
"""
	print data.crops.values()[0].html_header()
	for crop in data.crops.values():
		print crop.html_body()
	print "</table></body></html>\n"


	#crop_yaml = load_yaml("Unpacked/Data/Crops.yaml")
	#object_yaml = load_yaml("Unpacked/Data/ObjectInformation.yaml")

	#crops_raw = load_and_expand_yaml_tree("Unpacked/Data/Crops.yaml")
	#import pprint
	#pp = pprint.PrettyPrinter()
	#print pp.pprint(crops_raw)

def load_yaml_tree(filename):
	with open(filename) as f:
		return yaml.load(f)

def extract_content(yaml_tree):
	if 'content' in yaml_tree:
		return yaml_tree['content']
	sys.stderr.write("Warning: Tree does not contain a 'content' node.")
	return yaml_tree

def fix_type(x):
	if len(x) == 0:
		return x
	if re.match("-?[0-9]*$", x) is not None:
		return int(x)
	return x

def expand_slashes_tree(yaml_node):
	if isinstance(yaml_node, dict):
		return { k: expand_slashes_tree(v) for (k,v) in yaml_node.iteritems() }
	elif isinstance(yaml_node, list):
		return [ expand_slashes_tree(n) for n in yaml_node ]
	elif isinstance(yaml_node, (str,unicode)):
		pieces = yaml_node.split("/")	
		pieces = [ fix_type(x) for x in pieces ]
		if len(pieces) == 1:
			return pieces[0]
		return pieces
	else:
		sys.stderr.write("Skipping unknown type {0}".format(type(yaml_node)))
		return yaml_node

def load_and_expand_yaml_tree(filename):
	yaml_tree = load_yaml_tree(filename)
	yaml_tree = extract_content(yaml_tree)
	yaml_tree = expand_slashes_tree(yaml_tree)
	return yaml_tree



class StardewCrop:
	def __init__(self, id, croprecord, objinfo_raw):

		seed_obj_record = objinfo_raw[id]

		self.seed_id = id
		self.seed_name = seed_obj_record[0]
		self.seed_half_price = seed_obj_record[1]
		self.oUNKNOWN2 = seed_obj_record[2]
		if self.oUNKNOWN2 != -300:
			sys.stderr.write("Seed object {0} has unknown field of {1}, not -300".formaT(self.seed_id, self.oUNKNOWN2))

			# "Basic -##" or "Seeds -##"
		(self.seed_type, self.seed_type_UNKNOWN) = seed_obj_record[3].split(" ")
		if self.seed_type != 'Seeds':
			sys.stderr.write("Seed object {0} has unknown type {1}".format(self.seed_id, self.seed_type))
			sys.exit(1)
		if self.seed_type_UNKNOWN != '-74':
			sys.stderr.write("Seed object {0} has unknown type UNKNOWN {1}".format(self.seed_id, self.seed_type_UNKNOWN))
			sys.exit(1)

		self.seed_description = seed_obj_record[4]

		self.growth_days = [ int(x) for x in croprecord[0].split(" ") ] # Grow cylce? Days in each stage, starting with planted seed?
		croprecord[0] # String of space seperated integers

		seasons = croprecord[1].split(" ")
		self.season_spring = True if 'spring' in seasons else False
		self.season_summer = True if 'summer' in seasons else False
		self.season_fall = True if 'fall' in seasons else False
		self.season_winter = True if 'winter' in seasons else False

		self.image_index = croprecord[2] # Number
		self.plant_id = croprecord[3] # Plant ID
		self.regrowth_days = croprecord[4]
		if self.regrowth_days == -1:
			self.regrowth_days = None
		self.need_scytheqq = True if croprecord[5] == 1 else False

		if croprecord[6] == 'false':
			self.UNKNOWN6 = False
			self.UNKNOWN6a = None
			self.UNKNOWN6b = None
			self.UNKNOWN6c = None
			self.UNKNOWN6d = None
		elif croprecord[6].find("true ") == 0:
			(tmp1, tmp2, tmp3, tmp4, tmp5) = croprecord[6].split(" ")
			self.UNKNOWN6 =  True
			self.UNKNOWN6a = int(tmp2)
			self.UNKNOWN6b = int(tmp3)
			self.UNKNOWN6c = int(tmp4)
			self.UNKNOWN6d = float(tmp5)
		else:
			sys.stderr.write("Unable to parse crop record field 6: "+croprecord[6])
			sys.exit(1)

		self.impassible = True if croprecord[7] == "true" else False

		self.UNKNOWN8 = croprecord[8] # true/false + numbers if true?
		if croprecord[8] == 'false':
			self.UNKNOWN8 = False
			self.UNKNOWN8a = None
		elif croprecord[8].find("true ") == 0:
			self.UNKNOWN8 = True
			self.UNKNOWN8a = croprecord[8].split(" ")[1:]
		else:
			sys.stderr.write("Unable to parse crop record field 6: "+croprecord[6])

		#print repr(objinfo_raw.keys())
		#print repr(self.plant_id)
		#sys.exit(1)

		plant_obj_record = objinfo_raw[self.plant_id]
		self.crop_name = plant_obj_record[0]
		self.plant_base_sell_price = plant_obj_record[1]
		self.plant_UNKNOWN2 = plant_obj_record[2] # int?

			# "Basic -##" or "Seeds -##"
		(self.plant_type, self.plant_type_UNKNOWN) = plant_obj_record[3].split(" ")

		self.plant_description = plant_obj_record[4] # 

	def html_header(self):
		fields = [
			"P ID / S ID",
			"Crop / Seed",
			"Growth Days",
			"Seasons",
			"Image",
			"Harvest",
			"Unk6",
			"6a",
			"6b",
			"6c",
			"6d",
			"Pass",
			"Unk8",
			"Seed price",
			"",
			"Sell Price",
			"pUnk2",
			"Type",
			"Type??",
			"Seed Description",
			"Plant Description",
			]
		return "<tr><th>"+"</th><th>".join(fields)+"</th></tr>\n";


	def html_body(self):
		seasons = []
		if self.season_spring: seasons.append("spring")
		if self.season_summer: seasons.append("summer")
		if self.season_fall: seasons.append("fall")
		if self.season_winter: seasons.append("winter")

		growth = str(sum(self.growth_days))
		if self.regrowth_days is not None:
			growth += "+"+str(self.regrowth_days)
		fields = [
			str(self.plant_id) + " " + str(self.seed_id),
			self.crop_name + " / " + self.seed_name,
			growth,
			", ".join(seasons),
			self.image_index,
			"scythe" if self.need_scytheqq else "hand",
			self.UNKNOWN6,
			self.UNKNOWN6a if self.UNKNOWN6a is not None else "",
			self.UNKNOWN6b if self.UNKNOWN6b is not None else "",
			self.UNKNOWN6c if self.UNKNOWN6c is not None else "",
			self.UNKNOWN6d if self.UNKNOWN6d is not None else "",
			"impassible" if self.impassible else "",
			self.UNKNOWN8a,
			self.seed_half_price * 2,
			"",
			str(self.plant_base_sell_price),
			self.plant_UNKNOWN2,
			self.plant_type,
			self.plant_type_UNKNOWN,
			self.seed_description,
			self.plant_description,
			]
		newfields = []
		for f in fields:
			if isinstance(f, (int,float)):
				newfields.append('<td class="n">'+str(f)+"</td>")
			else:
				newfields.append('<td>'+str(f)+"</td>")
		return "<tr>"+"".join(newfields)+"</td>\n"

	def __str__(self):
		return "\t".join([ str(x) for x in [
			self.plant_id,
			self.crop_name,
			self.seed_id,
			self.seed_name,
			self.growth_days,
			self.regrowth_days,
			"spring" if self.season_spring else "",
			"summer" if self.season_summer else "",
			"fall" if self.season_fall else "",
			"winter" if self.season_winter else "",
			#self.image_index,
			"scythe" if self.need_scytheqq else "hand",
			self.UNKNOWN6,
			"(",
			self.UNKNOWN6a,
			self.UNKNOWN6b,
			self.UNKNOWN6c,
			self.UNKNOWN6d,
			")",
			"impassible" if self.impassible else "",
			self.UNKNOWN8a,
			"->",
			str(self.plant_base_sell_price)+"g",
			self.plant_UNKNOWN2,
			self.plant_type,
			self.plant_type_UNKNOWN,
			#self.plant_description,
			]
			])

class StardewData:
	def __init__(self, rootdir):
		crops_raw = load_and_expand_yaml_tree(joinpath(rootdir, "Data", "Crops.yaml"))
		objinfo_raw = load_and_expand_yaml_tree(joinpath(rootdir, "Data", "ObjectInformation.yaml"))

		self.crops = {}

		for id in crops_raw:
			crop_record = crops_raw[id]
			o = StardewCrop(id, crop_record, objinfo_raw)
			self.crops[id] = o

		
		

sys.exit(main())

