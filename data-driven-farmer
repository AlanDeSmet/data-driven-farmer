#! /usr/bin/python
# coding=utf-8

# The Data Driven Farmer
# Copyright 2016 Alan De Smet  chaos@highprogrammer.com
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


import yaml
import sys
import re
from os.path import join as joinpath
import math

DAYS_IN_SEASON = 28

def main():
	data = StardewData("Unpacked")

	crops = map(lambda x: StardewCrop(data.seeds[x], data.everything), data.seeds)
	crops.sort(key=StardewCrop.key_season_profit)

	print """<!DOCTYPE html>
<html><head><meta charset="utf-8">
<style>
body {
	font-family: 'Scaly Sans', sans-serif;
	font-size: 11pt;
}
th {
	background-color: #444;
	color: #FFF;
}
tbody tr:nth-child(odd) {
   background-color: #CCC;
}
td,th {
	padding-left: 0.2em;
	padding-right: 0.2em;
}
td { vertical-align: top; }
th { vertical-align: bottom; }
td.r,th.r { text-align: right; }
td.c,th.c { text-align: center; }
table { border-collapse: collapse; }
</style>
</head>
<body>
<table>
"""
	print html_row(
		StardewCrop.display_fields_labels(),
		header = True)
	for crop in crops:
		print html_row(crop.display_fields_values())

	print "</table></body></html>\n"


def load_yaml_tree(filename):
	with open(filename) as f:
		return yaml.load(f)

def extract_content(yaml_tree):
	if 'content' in yaml_tree:
		return yaml_tree['content']
	sys.stderr.write("Warning: Tree does not contain a 'content' node.")
	return yaml_tree

def expand_slashes_tree(yaml_node):
	if isinstance(yaml_node, dict):
		return { k: expand_slashes_tree(v) for (k,v) in yaml_node.iteritems() }
	elif isinstance(yaml_node, list):
		return [ expand_slashes_tree(n) for n in yaml_node ]
	elif isinstance(yaml_node, (str,unicode)):
		pieces = yaml_node.split("/")	
		if len(pieces) == 1:
			return pieces[0]
		return pieces
	else:
		sys.stderr.write("Skipping unknown type {0}".format(type(yaml_node)))
		return yaml_node

def load_and_expand_yaml_tree(filename):
	yaml_tree = load_yaml_tree(filename)
	yaml_tree = extract_content(yaml_tree)
	yaml_tree = expand_slashes_tree(yaml_tree)
	return yaml_tree


def html_row(fields, alignments = None, header = False):
	ret = '<tr>'
	for field in fields:
		ret += cell(field).html(header)
	ret += '</tr>\n'
	return ret



################################################################################
class CellObj:
	def __init__(self,	value, alignment, colspan):
		valid_alignments = ["left","right","center"]
		if alignment not in valid_alignments:
			raise Exception("alignment for cell must be one of: "+" ".join(valid_alignments))
		self.value = value
		self.alignment = alignment
		self.colspan = colspan

	def html(self, header=False):
		if header: ret = "<th"
		else:      ret = "<td"

		if self.alignment == "center" and not header:
			ret += ' class="c"'
		elif self.alignment == "right":
			ret += ' class="r"'
		elif self.alignment == "left" and header:
			ret += ' class="l"'

		if self.colspan > 1: ret += ' colspan="'+str(self.colspan)+'"'

		ret += ">" + self.value
		if header: ret += "</th>"
		else:      ret += "</td>"
		return ret

def cell(value, alignment=None, colspan=1):
	if isinstance(value, CellObj):
		return value
	if isinstance(value, int):
		value = str(value)
		if alignment is None: alignment = "right"
	else:
		if alignment is None: alignment = "left"
	return CellObj(value, alignment, colspan)





################################################################################
class StardewObject:
	def __init__(self, id, obj_record):
		self.id = id
		self.name = obj_record[0]
		type_and_num = obj_record[3].split(" ")
		self.category_label = type_and_num[0]

		self.type = 'unknown'

		if len(type_and_num) > 1:
			self.category_id = int(type_and_num[1])
		else:
			self.category_id = -999

		if self.category_label == "Ring":
			self.type = "ring"
			self.sale_price = int(obj_record[2])
			self.description = obj_record[1]
		else:
			self.sale_price = int(obj_record[1])
			self.description = obj_record[4]

		if len(obj_record) > 5:
			if re.search("(Day|Night)^(Spring|Summer|Fall|Winter)", obj_record[5]) is not None:
				(a, b) = obj_record[5].split("^")
				self.fishing_times = a.split(" ")
				self.fishing_seasons = b.split(" ")
			if obj_record[5] == 'food':
				self.type = 'food'
			if obj_record[5] == 'drink':
				self.type = 'drink'

		if re.search("\\bgeode\\b", self.name, re.IGNORECASE) is not None:
			self.type = 'geode'
			self.spawns = [ int(x) for x in obj_record[5].split(" ") ]
			

	def is_consumable(self):
		return self.type == 'food' or self.type == 'drink'






################################################################################
class StardewSeed (StardewObject):
	def __init__(self, id, obj_record, crop_record):
		StardewObject.__init__(self, id, obj_record)

		self.price = int(obj_record[1]) * 2

		type = 'cropseed'

		(str_growth_stages,
			str_seasons,
			str_image_index,
			str_plant_id,
			str_regrowth_days,
			str_needs_scythe,
			str_unknown6,
			str_impassible,
			str_unknown8) = crop_record

		self.growth_stages = [ int(x) for x in str_growth_stages.split(" ") ]
		self.seasons = str_seasons.lower().split(" ")
		self.image_index = int(str_image_index)
		self.spawns = [int(str_plant_id)]
		self.regrowth_days = int(str_regrowth_days)
		if self.regrowth_days == -1:
			self.regrowth_days = None
		self.need_scythe = True if str_needs_scythe == "1" else False

		if str_unknown6 == 'false':
			self.UNKNOWN6 = False
			self.num_created = 1
			self.UNKNOWN6b = None
			self.UNKNOWN6c = None
			self.UNKNOWN6d = None
		elif str_unknown6.find("true ") == 0:
			(tmp1, tmp2, tmp3, tmp4, tmp5) = str_unknown6.split(" ")
			self.UNKNOWN6 =  True
			self.num_created = int(tmp2)
			self.UNKNOWN6b = int(tmp3)
			self.UNKNOWN6c = int(tmp4)
			self.UNKNOWN6d = float(tmp5)
		else:
			sys.stderr.write("Unable to parse crop record field 6: "+unknown6)
			sys.exit(1)

		self.impassible = True if str_impassible == "true" else False

		if str_unknown8 == 'false':
			self.UNKNOWN8 = False
			self.UNKNOWN8a = None
		elif str_unknown8.find("true ") == 0:
			self.UNKNOWN8 = True
			self.UNKNOWN8a = str_unknown8.split(" ")[1:]
		else:
			sys.stderr.write("Unable to parse crop record field 6: "+str_unknown8)

	def harvests(self, days):
		""" Over days, how many harvests from initial planting

		Assumes you replant when you harvest, if it's not a repeating plant
		"""
		if self.regrowth_days is not None:
			return int( math.ceil( (days-self.total_growth_days())/self.regrowth_days ) )
		else:
			return int( math.floor( (days-1) / self.total_growth_days()))

	def total_growth_days(self):
		""" How many days until initially ready to harvest? """
		return sum(self.growth_stages)

	def num_seasons(self):
		""" How many seasons can this crop grow in? """
		return ((1 if "spring" in self.seasons else 0)+
			(1 if "summer" in self.seasons else 0)+
			(1 if "fall" in self.seasons else 0)+
			(1 if "winter" in self.seasons else 0))

	@staticmethod
	def display_fields_labels():
		return [
			"ID",
			"Name",
			cell("Growth Days", colspan=2),
			cell("Seasons", colspan=4),
			"Price",
			"Tool",
			"Pass",
			"Description",
			]

	def display_fields_values(self):
		growth_days = str(self.total_growth_days()) + ("+"+str(self.regrowth_days)) if self.regrowth_days is not None else ""
		return [
			self.id,
			self.name,
			self.total_growth_days(),
			("+"+str(self.regrowth_days)) if self.regrowth_days is not None else "",
			"Sp" if "spring" in self.seasons else "",
			"Su" if "summer" in self.seasons else "",
			"Fa" if "fall" in self.seasons else "",
			"Wi" if "winter" in self.seasons else "",
			self.price,
			cell("scythe" if self.need_scythe else "hand", alignment="center"),
			cell("impassible" if self.impassible else "", alignment="center"),
			self.description
			]


################################################################################
class StardewCrop:
	def __init__(self, seed, all_objs):
		self.seed = seed
		spawn = seed.spawns
		if len(spawn) != 1:
			raise Exception("Unexpected: seed {0} doesn't produce exactly one result: {1}".format(seed.name, spawn))
		self.spawn = all_objs[spawn[0]]

	def one_harvest_revenue(self):
		return self.spawn.sale_price * self.seed.num_created

	def seasonal_revenue(self):
		seasons = self.seed.num_seasons()
		days = DAYS_IN_SEASON * seasons
		harvests = self.seed.harvests(days)
		return self.one_harvest_revenue() * harvests / seasons

	def seasonal_expense(self):
		if self.seed.regrowth_days is not None:
			return self.seed.price
		else:
			seasons = self.seed.num_seasons()
			days = DAYS_IN_SEASON * seasons
			harvests = self.seed.harvests(days)
			return self.seed.price * harvests / seasons
		
	def seasonal_profit(self):
		return self.seasonal_revenue() - self.seasonal_expense()

	def greenhouse_profit(self, seasons):
		days = DAYS_IN_SEASON * seasons
		harvests = self.seed.harvests(days)
		revenue = self.one_harvest_revenue() * harvests / seasons

		if self.seed.regrowth_days is not None:
			expense = self.seed.price
		else:
			days = DAYS_IN_SEASON * seasons
			harvests = self.seed.harvests(days)
			expense = self.seed.price * harvests / seasons

		return revenue - expense
		

	@staticmethod
	def key_season_profit(obj):
		if   "spring" in obj.seed.seasons: season_key = 0
		elif "summer" in obj.seed.seasons: season_key = 100000
		elif "fall" in obj.seed.seasons:   season_key = 200000
		elif "winter" in obj.seed.seasons: season_key = 300000
		return season_key - obj.seasonal_profit()
		

	@staticmethod
	def display_fields_labels():
		return [
			"Profit",
			"Greenhouse",
			"Name",
			cell("Growth Days", colspan=2),
			cell("Seasons", colspan=4),
			"Price",
			cell("Sale Price", colspan=5),
			"Days",
			"Harvests",
			]

	def display_fields_values(self):
		return [
			self.seasonal_profit(),
			self.greenhouse_profit(seasons=4),
			self.seed.name,
			#self.spawn.name,
			self.seed.total_growth_days(),
			("+"+str(self.seed.regrowth_days)) if self.seed.regrowth_days is not None else "",
			"Sp" if "spring" in self.seed.seasons else "",
			"Su" if "summer" in self.seed.seasons else "",
			"Fa" if "fall" in self.seed.seasons else "",
			"Wi" if "winter" in self.seed.seasons else "",
			self.seed.price,
			self.spawn.sale_price,
			'×',
			str(self.seed.num_created),
			'=',
			self.one_harvest_revenue(),
			DAYS_IN_SEASON * self.seed.num_seasons(),
			self.seed.harvests(DAYS_IN_SEASON * self.seed.num_seasons()),
			]



		
################################################################################
class StardewData:
	def __init__(self, rootdir):
		crops_raw = load_and_expand_yaml_tree(joinpath(rootdir, "Data", "Crops.yaml"))
		objinfo_raw = load_and_expand_yaml_tree(joinpath(rootdir, "Data", "ObjectInformation.yaml"))

		self.everything = {}
		self.seeds = {}

		for id in objinfo_raw:
			if id in crops_raw:
				o = StardewSeed(id, objinfo_raw[id], crops_raw[id])
				self.seeds[id] = o
			else:
				o = StardewObject(id, objinfo_raw[id])
			self.everything[id] = o

		
		

sys.exit(main())

